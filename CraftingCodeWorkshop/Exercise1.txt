Exercise1

E.1 – TDD lifecycle & naming 
  
Objective
- Introduce naming convention
- Create production code from test
- Start from assertion
- Tip for deciding the first test to write: The simplest possible.
  
Problem description: Stack
  
Implement a Stack class with the following public methods:
  
+ void push(Object object)
+ Object pop()
  
Stack should throw an exception if popped when empty.




package com.codurance.craftingcode.exercise_01_stack;
 
import org.junit.Before;
import org.junit.Test;
 
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;
 
public class StackShould {
 
    private static final Object SOME_OBJECT = "Some Object";
  private static final Object ANOTHER_OBJECT = "Another object";
  private Stack stack;
 
  @Before
  public void initialise() {
      stack = new Stack();
  }
 
  @Test(expected = IllegalStateException.class) public void
  throw_exception_if_popped_when_empty() {
      stack = new Stack();
      stack.pop();
  }
 
  @Test public void
  pop_the_last_object_pushed() {
      stack.push(SOME_OBJECT);
 
      assertThat(stack.pop(), is(SOME_OBJECT));
  }
 
  @Test public void
  pop_objects_in_the_reverse_order_they_were_pushed() {
      stack.push(SOME_OBJECT);
      stack.push(ANOTHER_OBJECT);
 
      assertThat(stack.pop(), is(ANOTHER_OBJECT));
      assertThat(stack.pop(), is(SOME_OBJECT));
  }
   
}
 
 
package com.codurance.craftingcode.exercise_01_stack;
 
import java.util.ArrayList;
import java.util.List;
 
public class Stack {
    private List<Object> objects = new ArrayList<>();
 
  public Object pop() {
      if (objects.isEmpty()) {
          throw new IllegalStateException();
      }
      return objects.remove(objects.size() - 1);
  }
 
  public void push(Object object) {
      this.objects.add(object);
  }
}
Exercise6

E.6 – Outside-In TDD with Acceptance Tests
  
Objective:
Learn and practice the double loop of TDD
Test application from outside, according to side effect
  
Problem description:  Bank kata
  
Create a simple bank application with the following features:
  
- Deposit into Account
- Withdraw from an Account
- Print a bank statement to the console.
  
Acceptance criteria
Statement should have the following the format:
    DATE       | AMOUNT  | BALANCE
  10/04/2014 | 500.00  | 1400.00
  02/04/2014 | -100.00 | 900.00
  01/04/2014 | 1000.00 | 1000.00
 
Note: Start with an acceptance test


public class AccountService {
 
    public void deposit(int amount);
 
  public void withdraw(int amount);
 
  public void printStatement();
 
}

E.6 – Outside-In TDD with Acceptance Tests
  
Proposed acceptance test starting point;
 
@RunWith(MockitoJUntiRunner.class)
public class PrintStatementFeature {
 
    @Mock Console console;
 
  @Test public void 
    print_statement_containing_transactions_in_reverse_chronological_order() {
      AccountService accountService = new AccountService();
     accountService.deposit(1000);         
       accountService.withdraw(100);           
       accountService.deposit(500);           
      
       accountService.printStatement();       
      
       InOrder inOrder = inOrder(console);     
       inOrder.verify(console).printLine("DATE | AMOUNT | BALANCE");       
       inOrder.verify(console).printLine("10/04/2014 | 500.00 | 1400.00");     
       inOrder.verify(console).printLine("02/04/2014 | -100.00 | 900.00");     
       inOrder.verify(console).printLine("01/04/2014 | 1000.00 | 1000.00");
    }
}



package com.codurance.bankkata;
 
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
 
public class StatementPrinter {
 
    public static final String STATEMENT_HEADER = "DATE | AMOUNT | BALANCE";
 
    private DecimalFormat decimalFormatter = new DecimalFormat("#.00");
 
    private Console console;
 
    public StatementPrinter(Console console) {
        this.console = console;
    }
 
    public void print(List<Transaction> transactions) {
        console.printLine(STATEMENT_HEADER);
        printStatementLines(transactions);
    }
 
    private void printStatementLines(List<Transaction> transactions) {
        AtomicInteger runningBalance = new AtomicInteger(0);
        transactions.stream()
                    .map(transaction -> statementLine(transaction, runningBalance))
                    .collect(Collectors.toCollection(LinkedList::new))
                    .descendingIterator()
                    .forEachRemaining(console::printLine);
    }
 
    private String statementLine(Transaction transaction, AtomicInteger runningBalance) {
         return transaction.date()
                 + " | "
                 + decimalFormatter.format(transaction.amount())
                 + " | "
                 + decimalFormatter.format(runningBalance.addAndGet(transaction.amount()));
    }
}


package com.codurance.bankkata;
 
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
 
import java.util.List;
 
import static java.util.Arrays.asList;
import static java.util.Collections.EMPTY_LIST;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.verify;
 
@RunWith(MockitoJUnitRunner.class)
public class StatementPrinterShould {
 
    private static final List<Transaction> NO_TRANSACTIONS = EMPTY_LIST;
 
    @Mock Console console;
 
    private StatementPrinter statementPrinter;
 
    @Before
    public void initialise() {
        statementPrinter = new StatementPrinter(console);
    }
 
    @Test public void
    always_print_the_header() {
        statementPrinter.print(NO_TRANSACTIONS);
 
        verify(console).printLine("DATE | AMOUNT | BALANCE");
    }
 
    @Test public void
    print_transactions_in_reverse_chronological_order() {
        List<Transaction> transactions = transactionsContaing(
                                                deposit("01/04/2014", 1000),
                                                withdrawal("02/04/2014", 100),
                                                deposit("10/04/2014", 500));
        statementPrinter.print(transactions);
 
        InOrder inOrder = inOrder(console);
        inOrder.verify(console).printLine("DATE | AMOUNT | BALANCE");
        inOrder.verify(console).printLine("10/04/2014 | 500.00 | 1400.00");
        inOrder.verify(console).printLine("02/04/2014 | -100.00 | 900.00");
        inOrder.verify(console).printLine("01/04/2014 | 1000.00 | 1000.00");
    }
 
    private List<Transaction> transactionsContaing(Transaction... transactions) {
        return asList(transactions);
    }
 
    private Transaction withdrawal(String date, int amount) {
        return new Transaction(date, -amount);
    }
 
    private Transaction deposit(String date, int amount) {
        return new Transaction(date, amount);
    }
 
}